export type VulnerabilityReport = {
  cluster: string;
  description: string;
  fixedVersion: string;
  installedVersion: string;
  lastModifiedDate: string;
  links: string[];
  namespace: string;
  packagePURL: string;
  pod_id: string;
  primaryLink: string;
  publishedDate: string;
  resource: string;
  score: number;
  severity: string;
  target: string;
  title: string;
  vulnerabilityID: string;
  hash: string;
};

export async function fetchVulnerabilities(
  cluster: string,
  namespace: string,
): Promise<VulnerabilityReport[]> {
  const params = new URLSearchParams();
  if (cluster && cluster !== "all") params.append("cluster", cluster);
  if (namespace && namespace !== "all") params.append("namespace", namespace);

  // Use the API route instead of directly calling the backend
  const url = `/api/vulnerabilities?${params.toString()}`;
  const res = await fetch(url);
  if (!res.ok) throw new Error("Failed to fetch vulnerabilities");
  return res.json();
}

export class VulnerabilityService {
  private static readonly baseUrl = "/api/vulnerabilities";

  static async getVulnerabilities(
    cluster?: string,
    namespace?: string,
  ): Promise<VulnerabilityReport[]> {
    const params = new URLSearchParams();

    if (cluster && cluster !== "all") {
      params.append("cluster", cluster);
    }
    if (namespace && namespace !== "all") {
      params.append("namespace", namespace);
    }

    const url = params.toString()
      ? `${this.baseUrl}?${params.toString()}`
      : this.baseUrl;

    const response = await fetch(url);

    if (!response.ok) {
      throw new Error(
        `Failed to fetch vulnerabilities: ${response.statusText}`,
      );
    }

    return response.json();
  }

  static async getVulnerabilitiesByCluster(
    cluster: string,
  ): Promise<VulnerabilityReport[]> {
    return this.getVulnerabilities(cluster);
  }

  static async getVulnerabilitiesByNamespace(
    namespace: string,
  ): Promise<VulnerabilityReport[]> {
    return this.getVulnerabilities(undefined, namespace);
  }

  static async getVulnerabilitiesByClusterAndNamespace(
    cluster: string,
    namespace: string,
  ): Promise<VulnerabilityReport[]> {
    return this.getVulnerabilities(cluster, namespace);
  }
}
